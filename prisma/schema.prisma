generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models for user accounts
// TODO: Add separate table for user settings, such as theme colors, dark mode, etc. 
model User {
  id                       String  @id @unique @default(uuid())
  identifier               String  @unique @default(uuid())
  name                     String
  email                    String  @unique
  password                 String
  darkMode                 Boolean @default(false)
  color                    String  @default("lime")
  onboardingComplete       Boolean @default(false)
  verifiedEmail            Boolean @default(false)
  trophies                 Int     @default(0)
  twoFactorSecret          String  @default("")
  notificationSubscription String? @db.VarChar(500)
  zenCardOrder             String  @default("[\"goals.study_plan\", \"inventory.starred\", \"inventory.scan\"]")
  timeZone                 String  @default("America/Los_Angeles") @db.VarChar(255)

  CustomRoom           CustomRoom[]
  NotificationSettings NotificationSettings?
  CoachData            CoachData?
  OAuthToken           OAuthToken[]
  PasswordResetToken   PasswordResetToken[]
  properties           PropertyInvite[]
  RoutineItem          RoutineItem[]
  sessions             Session[]
  Board                Board[]
  Integration          Integration[]
  DailyCheckIn         DailyCheckIn[]
  Routine              Routine[]
}

model Integration {
  id   String @id @unique @default(uuid())
  name String // Also used to identify the integration

  inputParams String // Stuff like urls, auth tokens, etc... (SHOULD BE ENCRYPTED!!!)
  outputType  String @default("board")

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Optional
  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// Customizable notification settings (1 row per user)
model NotificationSettings {
  id                String  @id @unique @default(uuid())
  todoListUpdates   Boolean @default(true)
  dailyRoutineNudge Boolean @default(true)
  dailyCheckInNudge Boolean @default(true)
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model CoachData {
  id             String   @id @unique @default(uuid())
  lastStreakDate DateTime @default(now())
  streakCount    Int      @default(0)

  userId String @unique
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// User sessions are stored on the server
// Important: If there's way too much storage being used, just truncate this table ðŸ˜­
model Session {
  id        String    @id @unique @default(uuid())
  ip        String    @default("Unknown")
  userId    String
  timestamp DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// oAuth token passed to apps such as availability
model OAuthToken {
  id          String @id @unique @default(uuid())
  userId      String
  accessToken String @unique @default(uuid())
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Property modal box
model Property {
  id                  String               @id @unique @default(uuid())
  name                String               @default("My property")
  type                String               @default("apartment")
  color               String               @default("cyan")
  Board               Board[]
  customRooms         CustomRoom[]
  inbox               InboxItem[]
  inventory           Item[]
  members             PropertyInvite[]
  PropertyLinkInvites PropertyLinkInvite[]
  Integration         Integration[]
  Task                Task[]
}

// List of invited members to properties with their user permissions
model PropertyInvite {
  id          String   @id @unique @default(uuid())
  userId      String
  propertyId  String
  selected    Boolean  @default(false)
  permission  String   @default("read-only")
  accessToken String   @unique @default(uuid())
  accepted    Boolean  @default(false)
  profile     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomRoom {
  id             String   @id @unique @default(uuid())
  name           String
  private        Boolean  @default(false)
  propertyId     String
  userIdentifier String
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userIdentifier], references: [identifier], onDelete: Cascade)
}

model Item {
  id           String   @id @unique @default(uuid())
  name         String
  quantity     String
  note         String
  lastModified DateTime
  starred      Boolean  @default(false)
  category     String   @default("[]")
  room         String   @default("kitchen")
  propertyId   String
  trash        Boolean  @default(false)
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyLinkInvite {
  id         String   @id @unique @default(uuid())
  propertyId String
  token      String   @unique @default(uuid())
  accepted   Boolean  @default(false)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model InboxItem {
  id         String   @id @unique @default(uuid())
  who        String
  what       String
  when       DateTime
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @unique @default(uuid())
  userId    String
  token     String   @unique @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id          String  @id @unique @default(uuid())
  name        String
  description String  @default("")
  public      Boolean @default(true)
  pinned      Boolean @default(false)
  archived    Boolean @default(false)

  userId String?
  user   User?   @relation(fields: [userId], references: [identifier], onDelete: Cascade)

  propertyId   String
  property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  columns      Column[]
  integrations Integration[]
}

model Column {
  id      String @id @unique @default(uuid())
  name    String
  emoji   String
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[]
}

model Task {
  id          String    @id @unique @default(uuid())
  name        String
  description String?
  due         DateTime?
  color       String    @default("grey")
  pinned      Boolean   @default(false)
  completed   Boolean   @default(false)
  image       String?
  columnId    String?
  lastUpdated DateTime  @default(now())
  column      Column?   @relation(fields: [columnId], references: [id], onDelete: Cascade)

  parentTasks Task[] @relation("subtasks")
  subTasks    Task[] @relation("subtasks")

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Routine {
  id    String @id @unique @default(uuid())
  name  String
  note  String
  emoji String @default("1f331")

  timeOfDay  Int    @default(12)
  daysOfWeek String @default("[true, true, true, true, true, true, true]")

  items RoutineItem[]

  userId String
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model RoutineItem {
  id            String   @id @unique @default(uuid())
  name          String
  stepName      String
  category      String
  durationDays  Int
  progress      Int      @default(0)
  time          String
  emoji         String
  lastCompleted String?
  completed     Boolean  @default(false)
  feedback      String?  @default("")
  userId        String
  user          User     @relation(fields: [userId], references: [identifier], onDelete: Cascade)
  Routine       Routine? @relation(fields: [routineId], references: [id])
  routineId     String?
}

model DailyCheckIn {
  id     String   @id @unique @default(uuid())
  mood   String
  reason String   @default("Something else")
  date   DateTime
  userId String
  user   User     @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}
