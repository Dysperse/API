generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String @id @unique @default(uuid())
  identifier String @unique @default(uuid())

  name     String
  username String? @unique
  email    String  @unique
  password String
  darkMode String  @default("system")

  lastActive DateTime @default(now())

  color          String   @default("lime")
  unlockedColors String[]

  twoFactorSecret          String  @default("")
  notificationSubscription String? @db.VarChar(900)
  timeZone                 String  @default("America/Los_Angeles") @db.VarChar(255)

  lastReleaseVersionViewed Int @default(77711209)

  NotificationSettings NotificationSettings?
  Status               Status?
  Profile              Profile?
  PasswordResetToken   PasswordResetToken[]
  properties           PropertyInvite[]
  sessions             Session[]
  Board                Board[]
  Integration          Integration[]
  QrToken              QrToken[]

  followers  Follows[]    @relation("following")
  following  Follows[]    @relation("follower")
  ShareToken ShareToken[]
  Task       Task[]

  rooms            Room[]
  items            Item[]
  Event            Event[]
  EventParticipant EventParticipant[]
  settings         Settings?
}

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [email])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [email])
  followingId String

  accepted Boolean @default(false)

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
}

model Integration {
  id   String @id @unique @default(uuid())
  name String // Also used to identify the integration

  lastSynced DateTime @default(now())

  inputParams String // Stuff like urls, auth tokens, etc... (SHOULD BE ENCRYPTED!!!)
  outputType  String @default("board")

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Optional
  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// Customizable notification settings (1 row per user)
model NotificationSettings {
  id String @id @unique @default(uuid())

  todoListUpdates Boolean @default(true)
  followerUpdates Boolean @default(true)
  statusUpdates   Boolean @default(true)
  boardUpdates    Boolean @default(true)

  notifyFriendsForStatusUpdates Boolean @default(true)

  boards Boolean @default(true)

  userId String @unique
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// Customizable notification settings (1 row per user)
model Status {
  id String @id @unique @default(uuid())

  status String  @default("")
  emoji  String?
  text   String?

  until   DateTime?
  started DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// Customizable notification settings (1 row per user)
model Profile {
  id      String  @id @unique @default(uuid())
  picture String?

  spotify Json?
  google  Json?

  birthday     DateTime @default(now())
  hobbies      String[]
  badges       String[]
  workingHours String?  @default("[]")

  bio String @default("")

  private Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model Settings {
  id String @id @unique @default(uuid())

  hiddenPerspectives String[] @default([])

  userId String @unique
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// User sessions are stored on the server
// Important: If there's way too much storage being used, just truncate this table ðŸ˜­
model Session {
  id        String    @id @unique @default(uuid())
  ip        String    @default("Unknown")
  userId    String
  timestamp DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Property modal box
model Property {
  id             String  @id @unique @default(uuid())
  name           String  @default("My property")
  type           String  @default("apartment")
  vanishingTasks Boolean @default(false)
  color          String  @default("cyan")

  Board               Board[]
  rooms               Room[]
  inbox               InboxItem[]
  inventory           Item[]
  members             PropertyInvite[]
  PropertyLinkInvites PropertyLinkInvite[]
  Integration         Integration[]
  Task                Task[]
  ShareToken          ShareToken[]
}

// List of invited members to properties with their user permissions
model PropertyInvite {
  id          String   @id @unique @default(uuid())
  userId      String
  propertyId  String
  selected    Boolean  @default(false)
  permission  String   @default("read-only")
  accessToken String   @unique @default(uuid())
  accepted    Boolean  @default(false)
  profile     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PropertyLinkInvite {
  id         String   @id @unique @default(uuid())
  propertyId String
  token      String   @unique @default(uuid())
  accepted   Boolean  @default(false)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model InboxItem {
  id         String   @id @unique @default(uuid())
  who        String
  what       String
  when       DateTime
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @unique @default(uuid())
  userId    String
  token     String   @unique @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShareToken {
  id String @id @unique @default(uuid())

  createdAt DateTime  @default(now())
  expiresAt DateTime?
  token     String    @unique @default(uuid())

  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  readOnly Boolean @default(true)

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id          String  @id @unique @default(uuid())
  name        String
  description String  @default("")
  public      Boolean @default(true)
  pinned      Boolean @default(false)
  archived    Boolean @default(false)
  wallpaper   String?

  userId String?
  user   User?   @relation(fields: [userId], references: [identifier], onDelete: Cascade)

  shareTokens ShareToken[]

  propertyId   String
  property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  columns      Column[]
  integrations Integration[]
}

model Column {
  id      String @id @unique @default(uuid())
  order   Int    @default(1)
  name    String
  emoji   String
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[]
}

model Task {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  where       String?
  color       String  @default("grey")
  pinned      Boolean @default(false)

  due           DateTime?
  dateOnly      Boolean   @default(true)
  notifications Int[]     @default([])

  completed   Boolean   @default(false)
  completedAt DateTime?

  createdBy User? @relation(fields: [userId], references: [id])

  image       String?
  columnId    String?
  lastUpdated DateTime @default(now())
  column      Column?  @relation(fields: [columnId], references: [id], onDelete: Cascade)

  parentTasks Task[] @relation("subtasks")
  subTasks    Task[] @relation("subtasks")

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String?

  Item Item[]
}

model QrToken {
  id      String   @id @unique @default(uuid())
  token   String   @unique @default(uuid())
  expires DateTime

  userId String?
  user   User?   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// Inventory redesign
model Room {
  id      String  @id @unique @default(uuid())
  name    String  @default("My room")
  note    String?
  emoji   String  @default("ðŸ“¦")
  private Boolean @default(false)

  items Item[]

  createdBy User   @relation(fields: [userId], references: [id])
  userId    String

  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

model Item {
  id             String   @id @unique @default(uuid())
  name           String?
  image          String?
  quantity       String?
  note           String?
  categories     String[]
  estimatedValue Int?
  serialNumber   String?
  condition      String?
  starred        Boolean  @default(false)

  createdBy User?     @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  room   Room?   @relation(fields: [roomId], references: [id])
  roomId String?

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // TODO: Users can attach tasks to items
  tasks Task[]
}

// When2Meet style scheduling
model Event {
  id          String  @id @unique @default(uuid())
  name        String
  location    String?
  description String?

  startDate      DateTime
  endDate        DateTime
  excludingDates DateTime[]
  excludingDays  String[]
  excludingHours Int[]

  timeZone String @default("America/Los_Angeles") @db.VarChar(255)

  createdAt DateTime @default(now())
  createdBy String
  user      User     @relation(fields: [createdBy], references: [identifier], onDelete: Cascade)

  participants EventParticipant[]
}

model EventParticipant {
  id           String @id @unique @default(uuid())
  availability Json   @default("[]")

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  // For users who aren't signed up
  userData Json?

  // For users who are signed up
  userId String?
  user   User?   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}
