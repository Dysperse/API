generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                       String                @id @unique @default(uuid())
  identifier               String                @unique @default(uuid())
  name                     String
  email                    String                @unique
  password                 String
  darkMode                 String                @default("system")
  color                    String                @default("lime")
  onboardingComplete       Boolean               @default(false)
  trophies                 Int                   @default(0)
  twoFactorSecret          String                @default("")
  notificationSubscription String?               @db.VarChar(900)
  timeZone                 String                @default("America/Los_Angeles") @db.VarChar(255)
  lastReleaseVersionViewed Int                   @default(77711209)
  unlockedColors           String[]
  username                 String?               @unique
  Board                    Board[]
  CoachData                CoachData?
  CustomRoom               CustomRoom[]
  DailyCheckIn             DailyCheckIn[]
  following                Follows[]             @relation("follower")
  followers                Follows[]             @relation("following")
  Integration              Integration[]
  NotificationSettings     NotificationSettings?
  PasswordResetToken       PasswordResetToken[]
  Profile                  Profile?
  properties               PropertyInvite[]
  QrToken                  QrToken[]
  RoutineItem              RoutineItem[]
  sessions                 Session[]
  ShareToken               ShareToken[]
  Status                   Status?
  Task                     Task[]
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [email])
  following   User   @relation("following", fields: [followingId], references: [email])

  @@id([followerId, followingId])
}

model Integration {
  id          String   @id @unique @default(uuid())
  name        String
  userId      String
  propertyId  String
  inputParams String
  boardId     String?
  outputType  String   @default("board")
  lastSynced  DateTime @default(now())
  board       Board?   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model NotificationSettings {
  id                String  @id @unique @default(uuid())
  todoListUpdates   Boolean @default(true)
  dailyRoutineNudge Boolean @default(true)
  userId            String  @unique
  dailyCheckInNudge Boolean @default(true)
  boards            Boolean @default(true)
  statusUpdates     Boolean @default(true)
  followerUpdates   Boolean @default(true)
  user              User    @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model Status {
  id      String    @id @unique @default(uuid())
  status  String    @default("")
  until   DateTime?
  userId  String    @unique
  started DateTime?
  text    String?
  user    User      @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model Profile {
  id           String   @id @unique @default(uuid())
  birthday     DateTime @default(now())
  hobbies      String[]
  badges       String[]
  bio          String   @default("")
  private      Boolean  @default(false)
  userId       String   @unique
  picture      String?
  workingHours String?  @default("[]")
  spotify      Json?
  google       Json?
  user         User     @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model CoachData {
  id             String   @id @unique @default(uuid())
  lastStreakDate DateTime @default(now())
  streakCount    Int      @default(0)
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model Session {
  id        String    @id @unique @default(uuid())
  userId    String
  ip        String    @default("Unknown")
  timestamp DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id                  String               @id @unique @default(uuid())
  name                String               @default("My property")
  type                String               @default("apartment")
  color               String               @default("cyan")
  vanishingTasks      Boolean              @default(false)
  Board               Board[]
  customRooms         CustomRoom[]
  inbox               InboxItem[]
  Integration         Integration[]
  inventory           Item[]
  members             PropertyInvite[]
  PropertyLinkInvites PropertyLinkInvite[]
  ShareToken          ShareToken[]
  Task                Task[]
}

model PropertyInvite {
  id          String   @id @unique @default(uuid())
  userId      String
  propertyId  String
  selected    Boolean  @default(false)
  permission  String   @default("read-only")
  accessToken String   @unique @default(uuid())
  accepted    Boolean  @default(false)
  profile     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomRoom {
  id             String   @id @unique @default(uuid())
  name           String
  private        Boolean  @default(false)
  propertyId     String
  userIdentifier String
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userIdentifier], references: [identifier], onDelete: Cascade)
}

model Item {
  id           String   @id @unique @default(uuid())
  name         String
  quantity     String
  note         String
  lastModified DateTime
  starred      Boolean  @default(false)
  category     String   @default("[]")
  room         String   @default("kitchen")
  propertyId   String
  trash        Boolean  @default(false)
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyLinkInvite {
  id         String   @id @unique @default(uuid())
  propertyId String
  token      String   @unique @default(uuid())
  accepted   Boolean  @default(false)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model InboxItem {
  id         String   @id @unique @default(uuid())
  who        String
  what       String
  when       DateTime
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @unique @default(uuid())
  userId    String
  token     String   @unique @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShareToken {
  id         String    @id @unique @default(uuid())
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  token      String    @unique @default(uuid())
  boardId    String?
  propertyId String
  userId     String
  readOnly   Boolean   @default(true)
  board      Board?    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id           String        @id @unique @default(uuid())
  name         String
  public       Boolean       @default(true)
  pinned       Boolean       @default(false)
  archived     Boolean       @default(false)
  propertyId   String
  description  String        @default("")
  userId       String?
  property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [identifier], onDelete: Cascade)
  columns      Column[]
  integrations Integration[]
  shareTokens  ShareToken[]
}

model Column {
  id      String @id @unique @default(uuid())
  name    String
  emoji   String
  boardId String
  order   Int    @default(1)
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[]
}

model Task {
  id            String    @id @unique @default(uuid())
  name          String
  description   String?
  due           DateTime?
  color         String    @default("grey")
  pinned        Boolean   @default(false)
  completed     Boolean   @default(false)
  image         String?
  columnId      String?
  propertyId    String
  lastUpdated   DateTime  @default(now())
  where         String?
  completedAt   DateTime?
  userId        String?
  notifications Int[]     @default([])
  column        Column?   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  property      Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdBy     User?     @relation(fields: [userId], references: [id])
  Task_A        Task[]    @relation("subtasks")
  Task_B        Task[]    @relation("subtasks")
}

model RoutineItem {
  id                  String                @id @unique @default(uuid())
  name                String
  stepName            String
  category            String
  durationDays        Int
  progress            Int                   @default(0)
  emoji               String
  lastCompleted       String?
  completed           Boolean               @default(false)
  feedback            String?               @default("")
  userId              String
  timeOfDay           Int                   @default(12)
  daysOfWeek          Boolean[]             @default([true, true, true, true, true, true, true])
  RoutineActivityData RoutineActivityData[]
  user                User                  @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model RoutineActivityData {
  id            String      @id @unique @default(uuid())
  routineItemId String
  date          DateTime
  routineItem   RoutineItem @relation(fields: [routineItemId], references: [id], onDelete: Cascade)
}

model DailyCheckIn {
  id     String   @id @unique @default(uuid())
  mood   String
  date   DateTime
  userId String
  reason String   @default("Something else")
  stress Int      @default(0)
  food   Int      @default(1)
  pain   Int      @default(1)
  rest   Int      @default(0)
  user   User     @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model QrToken {
  id      String   @id @unique @default(uuid())
  token   String   @unique @default(uuid())
  expires DateTime
  userId  String?
  user    User?    @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}
