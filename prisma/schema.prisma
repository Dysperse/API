generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                  @id @unique @default(autoincrement())
  identifier               String               @unique @default(cuid())
  name                     String
  email                    String               @unique
  password                 String
  darkMode                 Boolean              @default(false)
  color                    String               @default("cyan")
  onboardingComplete       Boolean              @default(false)
  verifiedEmail            Boolean              @default(false)
  trophies                 Int                  @default(0)
  twoFactorSecret          String               @default("")
  notificationSubscription String?              @db.VarChar(500)
  properties               PropertyInvite[]
  sessions                 Session[]
  PasswordResetToken       PasswordResetToken[]
  RoutineItem              RoutineItem[]
  SpaceItem                SpaceItem[]
}

model Session {
  id     String @id @default(uuid())
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model Property {
  id                  String               @id @default(uuid())
  name                String               @default("My property")
  type                String               @default("apartment")
  color               String               @default("cyan")
  customRooms         CustomRoom[]
  inventory           Item[]
  members             PropertyInvite[]
  PropertyLinkInvites PropertyLinkInvite[]
  inbox               InboxItem[]
  Board               Board[]
  SpaceItem           SpaceItem[]
}

model PropertyInvite {
  id          Int      @id @unique @default(autoincrement())
  userId      Int
  propertyId  String
  selected    Boolean  @default(false)
  permission  String   @default("read-only")
  accessToken String   @unique @default(uuid())
  accepted    Boolean  @default(false)
  profile     Property @relation(fields: [propertyId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model CustomRoom {
  id         String   @id @default(uuid())
  name       String
  pinned     Boolean  @default(false)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Item {
  id           Int      @id @default(autoincrement())
  name         String
  quantity     String
  note         String
  lastModified DateTime
  starred      Boolean  @default(false)
  category     String   @default("[]")
  room         String   @default("kitchen")
  propertyId   String
  trash        Boolean  @default(false)
  property     Property @relation(fields: [propertyId], references: [id])
}

model PropertyLinkInvite {
  id         Int      @id @default(autoincrement())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  token      String   @unique @default(uuid())
  accepted   Boolean  @default(false)
}

model InboxItem {
  id   Int      @id @default(autoincrement())
  who  String
  what String
  when DateTime

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique @default(uuid())
  createdAt DateTime @default(now())
}

// Kanban boards

model Board {
  id      String   @id @default(uuid())
  name    String
  public  Boolean  @default(false)
  columns Column[]

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Column {
  id      Int    @id @default(autoincrement())
  name    String
  emoji   String
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[]
}

model Task {
  id Int @id @default(autoincrement())

  name        String
  description String?
  due         DateTime?

  color     String  @default("blue")
  pinned    Boolean @default(false)
  completed Boolean @default(false)

  parentTasks Task[] @relation("subtasks")
  subTasks    Task[] @relation("subtasks")

  columnId Int
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

model RoutineItem {
  id            Int     @id @default(autoincrement())
  name          String
  stepName      String
  category      String
  durationDays  Int
  progress      Int     @default(0)
  time          String
  emoji         String
  lastCompleted String?

  completed Boolean @default(false)
  feedback  String? @default("")

  userId String
  user   User   @relation(fields: [userId], references: [identifier])
}

model SpaceItem {
  id      String  @id @unique @default(cuid())
  content String
  color   String  @default("blue")
  pinned  Boolean @default(false)
  userId  String
  public  Boolean @default(false)
  user    User    @relation(fields: [userId], references: [identifier])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}
