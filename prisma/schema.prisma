generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                @id @unique @default(cuid())
  identifier               String                @unique @default(cuid())
  name                     String
  email                    String                @unique
  password                 String
  darkMode                 Boolean               @default(false)
  color                    String                @default("lime")
  onboardingComplete       Boolean               @default(false)
  verifiedEmail            Boolean               @default(false)
  trophies                 Int                   @default(0)
  twoFactorSecret          String                @default("")
  notificationSubscription String?               @db.VarChar(500)
  zenCardOrder             String                @default("[\"goals.study_plan\", \"inventory.starred\", \"inventory.scan\", \"achievements.trigger\"]")
  CustomRoom               CustomRoom[]
  NotificationSettings     NotificationSettings?
  OAuthToken               OAuthToken[]
  PasswordResetToken       PasswordResetToken[]
  properties               PropertyInvite[]
  RoutineItem              RoutineItem[]
  sessions                 Session[]
}

model NotificationSettings {
  id                String  @id @unique @default(cuid())
  todoListUpdates   Boolean @default(true)
  dailyRoutineNudge Boolean @default(true)
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model Session {
  id        String    @id @unique @default(uuid())
  ip        String    @default("Unknown")
  userId    String
  timestamp DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthToken {
  id          String @id @unique @default(cuid())
  userId      String
  accessToken String @unique @default(cuid())
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id                  String               @id @unique @default(uuid())
  name                String               @default("My property")
  type                String               @default("apartment")
  color               String               @default("cyan")
  Board               Board[]
  customRooms         CustomRoom[]
  inbox               InboxItem[]
  inventory           Item[]
  members             PropertyInvite[]
  PropertyLinkInvites PropertyLinkInvite[]
}

model PropertyInvite {
  id          String   @id @unique @default(cuid())
  userId      String
  propertyId  String
  selected    Boolean  @default(false)
  permission  String   @default("read-only")
  accessToken String   @unique @default(uuid())
  accepted    Boolean  @default(false)
  profile     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomRoom {
  id             String   @id @unique @default(uuid())
  name           String
  private        Boolean  @default(false)
  propertyId     String
  userIdentifier String
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userIdentifier], references: [identifier], onDelete: Cascade)
}

model Item {
  id           String   @id @unique @default(cuid())
  name         String
  quantity     String
  note         String
  lastModified DateTime
  starred      Boolean  @default(false)
  category     String   @default("[]")
  room         String   @default("kitchen")
  propertyId   String
  trash        Boolean  @default(false)
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyLinkInvite {
  id         String   @id @unique @default(cuid())
  propertyId String
  token      String   @unique @default(uuid())
  accepted   Boolean  @default(false)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model InboxItem {
  id         String   @id @unique @default(cuid())
  who        String
  what       String
  when       DateTime
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @unique @default(cuid())
  userId    String
  token     String   @unique @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id         String   @id @unique @default(uuid())
  name       String
  public     Boolean  @default(false)
  pinned     Boolean  @default(false)
  archived   Boolean  @default(false)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  columns    Column[]
}

model Column {
  id      String @id @unique @default(cuid())
  name    String
  emoji   String
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[]
}

model Task {
  id          String    @id @unique @default(cuid())
  name        String
  description String?
  due         DateTime?
  color       String    @default("brown")
  pinned      Boolean   @default(false)
  completed   Boolean   @default(false)
  image       String?
  columnId    String?
  column      Column?   @relation(fields: [columnId], references: [id], onDelete: Cascade)

  parentTasks Task[] @relation("subtasks")
  subTasks    Task[] @relation("subtasks")
}

model RoutineItem {
  id            String  @id @unique @default(cuid())
  name          String
  stepName      String
  category      String
  durationDays  Int
  progress      Int     @default(0)
  time          String
  emoji         String
  lastCompleted String?
  completed     Boolean @default(false)
  feedback      String? @default("")
  userId        String
  user          User    @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}
