generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Models for user accounts
// TODO: Add separate table for user settings, such as theme colors, dark mode, etc. 
model User {
  id         String @id @unique @default(uuid())
  identifier String @unique @default(uuid())

  name     String
  username String? @unique
  email    String  @unique
  password String
  darkMode String  @default("system")

  color          String   @default("lime")

  // TODO: Add unlocked
  unlockedColors String[]

  onboardingComplete       Boolean @default(false)
  trophies                 Int     @default(0)
  twoFactorSecret          String  @default("")
  notificationSubscription String? @db.VarChar(900)
  timeZone                 String  @default("America/Los_Angeles") @db.VarChar(255)

  lastReleaseVersionViewed Int @default(77711209)

  CustomRoom           CustomRoom[]
  NotificationSettings NotificationSettings?
  Status               Status?
  Profile              Profile?
  CoachData            CoachData?
  PasswordResetToken   PasswordResetToken[]
  properties           PropertyInvite[]
  RoutineItem          RoutineItem[]
  sessions             Session[]
  Board                Board[]
  Integration          Integration[]
  DailyCheckIn         DailyCheckIn[]
  QrToken              QrToken[]

  followers  Follows[]    @relation("following")
  following  Follows[]    @relation("follower")
  ShareToken ShareToken[]
  Task       Task[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [email])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [email])
  followingId String

  @@id([followerId, followingId])
}

model Integration {
  id   String @id @unique @default(uuid())
  name String // Also used to identify the integration

  lastSynced DateTime @default(now())

  inputParams String // Stuff like urls, auth tokens, etc... (SHOULD BE ENCRYPTED!!!)
  outputType  String @default("board")

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Optional
  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// Customizable notification settings (1 row per user)
model NotificationSettings {
  id String @id @unique @default(uuid())

  todoListUpdates   Boolean @default(true)
  followerUpdates   Boolean @default(true)
  dailyRoutineNudge Boolean @default(true)
  dailyCheckInNudge Boolean @default(true)
  statusUpdates     Boolean @default(true)

  boards Boolean @default(true)

  userId String @unique
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// Customizable notification settings (1 row per user)
model Status {
  id String @id @unique @default(uuid())

  status String  @default("")
  text   String?

  until   DateTime?
  started DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// Customizable notification settings (1 row per user)
model Profile {
  id      String  @id @unique @default(uuid())
  picture String?

  spotify Json?
  google  Json?

  birthday     DateTime @default(now())
  hobbies      String[]
  badges       String[]
  workingHours String?  @default("[]")

  bio String @default("")

  private Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model CoachData {
  id             String   @id @unique @default(uuid())
  lastStreakDate DateTime @default(now())
  streakCount    Int      @default(0)

  userId String @unique
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

// User sessions are stored on the server
// Important: If there's way too much storage being used, just truncate this table ðŸ˜­
model Session {
  id        String    @id @unique @default(uuid())
  ip        String    @default("Unknown")
  userId    String
  timestamp DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Property modal box
model Property {
  id                  String               @id @unique @default(uuid())
  name                String               @default("My property")
  type                String               @default("apartment")
  vanishingTasks      Boolean              @default(false)
  color               String               @default("cyan")
  Board               Board[]
  customRooms         CustomRoom[]
  inbox               InboxItem[]
  inventory           Item[]
  members             PropertyInvite[]
  PropertyLinkInvites PropertyLinkInvite[]
  Integration         Integration[]
  Task                Task[]
  ShareToken          ShareToken[]
}

// List of invited members to properties with their user permissions
model PropertyInvite {
  id          String   @id @unique @default(uuid())
  userId      String
  propertyId  String
  selected    Boolean  @default(false)
  permission  String   @default("read-only")
  accessToken String   @unique @default(uuid())
  accepted    Boolean  @default(false)
  profile     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomRoom {
  id             String   @id @unique @default(uuid())
  name           String
  private        Boolean  @default(false)
  propertyId     String
  userIdentifier String
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userIdentifier], references: [identifier], onDelete: Cascade)
}

model Item {
  id           String   @id @unique @default(uuid())
  name         String
  quantity     String
  note         String
  lastModified DateTime
  starred      Boolean  @default(false)
  category     String   @default("[]")
  room         String   @default("kitchen")
  propertyId   String
  trash        Boolean  @default(false)
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyLinkInvite {
  id         String   @id @unique @default(uuid())
  propertyId String
  token      String   @unique @default(uuid())
  accepted   Boolean  @default(false)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model InboxItem {
  id         String   @id @unique @default(uuid())
  who        String
  what       String
  when       DateTime
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @unique @default(uuid())
  userId    String
  token     String   @unique @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShareToken {
  id String @id @unique @default(uuid())

  createdAt DateTime  @default(now())
  expiresAt DateTime?
  token     String    @unique @default(uuid())

  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  readOnly Boolean @default(true)

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Board {
  id          String  @id @unique @default(uuid())
  name        String
  description String  @default("")
  public      Boolean @default(true)
  pinned      Boolean @default(false)
  archived    Boolean @default(false)

  userId String?
  user   User?   @relation(fields: [userId], references: [identifier], onDelete: Cascade)

  shareTokens ShareToken[]

  propertyId   String
  property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  columns      Column[]
  integrations Integration[]
}

model Column {
  id      String @id @unique @default(uuid())
  order   Int    @default(1)
  name    String
  emoji   String
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[]
}

model Task {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  where       String?
  color       String  @default("grey")
  pinned      Boolean @default(false)

  due           DateTime?
  notifications Int[]     @default([])

  completed   Boolean   @default(false)
  completedAt DateTime?

  createdBy User? @relation(fields: [userId], references: [id])

  image       String?
  columnId    String?
  lastUpdated DateTime @default(now())
  column      Column?  @relation(fields: [columnId], references: [id], onDelete: Cascade)

  parentTasks Task[] @relation("subtasks")
  subTasks    Task[] @relation("subtasks")

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId     String?
}

model RoutineItem {
  id           String @id @unique @default(uuid())
  name         String
  stepName     String
  category     String
  durationDays Int
  progress     Int    @default(0)
  emoji        String

  timeOfDay  Int       @default(12)
  daysOfWeek Boolean[] @default([true, true, true, true, true, true, true])

  lastCompleted       String?
  completed           Boolean               @default(false)
  feedback            String?               @default("")
  RoutineActivityData RoutineActivityData[]

  userId String
  user   User   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model RoutineActivityData {
  id            String   @id @unique @default(uuid())
  routineItemId String
  date          DateTime

  routineItem RoutineItem @relation(fields: [routineItemId], references: [id], onDelete: Cascade)
}

model DailyCheckIn {
  id     String   @id @unique @default(uuid())
  mood   String
  reason String   @default("Something else")
  stress Int      @default(0)
  rest   Int      @default(0)
  pain   Int      @default(1)
  food   Int      @default(1)
  date   DateTime
  userId String
  user   User     @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}

model QrToken {
  id      String   @id @unique @default(uuid())
  token   String   @unique @default(uuid())
  expires DateTime

  userId String?
  user   User?   @relation(fields: [userId], references: [identifier], onDelete: Cascade)
}
