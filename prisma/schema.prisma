// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id         String   @id @unique @default(uuid())
  ip         String   @default("Unknown")
  deviceName String?
  deviceType String?
  timestamp  DateTime @default(now())

  userId  String
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  qrToken QrToken[]
}

model QrToken {
  token     String   @id @unique @default(cuid())
  expiresAt DateTime
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model User {
  id                       String  @id @unique @default(uuid())
  username                 String? @unique
  email                    String  @unique
  password                 String
  twoFactorSecret          String?
  lastReleaseVersionViewed Int     @default(77711209)
  timeZone                 String  @default("America/Los_Angeles")

  hasEarlyAccess Boolean @default(false)

  profile  Profile?
  agreeTos Boolean  @default(false)

  tabs         Tab[]
  sessions     Session[]
  spaces       SpaceInvite[]
  collections  Collection[]
  integrations Integration[]

  notificationSettings      NotificationSettings?
  notificationSubscriptions NotificationSubscription[]

  // Friends
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  // etc
  labels             Label[]
  invitedCollections CollectionAccess[]
}

model Profile {
  name         String
  bio          String   @default("")
  birthday     DateTime @default(now())
  picture      String?
  badges       Json?
  workingHours Json?
  lastActive   DateTime @default(now())
  private      Boolean  @default(false)
  pattern      String?

  theme          String   @default("mint")
  darkMode       String   @default("system")
  unlockedThemes String[]

  spotifyAuthTokens Json?
  googleAuthTokens  Json?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tab    Tab[]
}

// Notifications
model NotificationSettings {
  id String @id @unique @default(uuid())

  dueDates Boolean @default(true)
  planDay  Boolean @default(true)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationSubscription {
  id String @id @unique @default(uuid())

  subscription Json
  User         User?   @relation(fields: [userId], references: [id])
  userId       String?
}

// Friends
model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  accepted Boolean @default(false)
  blocked  Boolean @default(false)

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
}

// Tabs
model Tab {
  id     String @id @unique @default(uuid())
  slug   String
  params Json?

  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?

  labelId String?
  label   Label?  @relation(fields: [labelId], references: [id])

  order         String?
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  Profile       Profile? @relation(fields: [profileUserId], references: [userId])
  profileUserId String?
}

// Spaces
enum SpaceAccess {
  READ_ONLY
  ADMIN
  OWNER
}

model Space {
  id         String  @id @unique @default(uuid())
  name       String
  color      String  @default("mint")
  pattern    String?
  vanishMode Boolean @default(false)

  collections  Collection[]
  labels       Label[]
  entities     Entity[]
  members      SpaceInvite[]
  integrations Integration[]
}

model Integration {
  id   String @id @unique @default(uuid())
  name String

  lastSynced DateTime @default(now())
  params     Json

  options Json?

  space     Space  @relation(fields: [spaceId], references: [id])
  createdBy User   @relation(fields: [userId], references: [id])
  spaceId   String
  userId    String

  collections Collection[]
  entities    Entity[]
  labels      Label[]

  @@unique([name, userId])
}

model SpaceInvite {
  id       String      @id @unique @default(uuid())
  selected Boolean     @default(true)
  access   SpaceAccess @default(OWNER)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])
}

// Labels & Entities 
model Label {
  id    String @id @unique @default(uuid())
  // Appearance
  name  String
  emoji String
  color String @default("mint")

  // Location
  entities  Entity[]
  space     Space?   @relation(fields: [spaceId], references: [id])
  spaceId   String
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String

  // Collection?
  collections Collection[]
  tab         Tab[]

  integration       Integration? @relation(fields: [integrationId], references: [id])
  integrationId     String?
  integrationParams Json?
}

enum EntityType {
  TASK
  ITEM
  NOTE
}

model CompletionInstance {
  id          String    @id @unique @default(cuid())
  completedAt DateTime?

  // For recurring tasks
  iteration DateTime?

  task   Entity @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

enum CollectionAccessType {
  READ_ONLY
  EDITOR
  MODERATOR
}

model CollectionAccess {
  id       String               @id @unique @default(uuid())
  selected Boolean              @default(true)
  hasSeen  Boolean              @default(false)
  access   CollectionAccessType @default(READ_ONLY)

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model CollectionLink {
  id   String @id @unique @default(uuid())
  name String
  url  String

  readOnly Boolean @default(false)

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model Collection {
  id            String  @id @unique @default(uuid())
  // Info
  name          String
  description   String  @default("")
  public        Boolean @default(true)
  pinned        Boolean @default(false)
  archived      Boolean @default(false)
  emoji         String?
  showCompleted Boolean @default(true)

  gridOrder Json?

  // Location
  space   Space?  @relation(fields: [spaceId], references: [id])
  spaceId String?

  userId    String?
  createdBy User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Stuff
  labels      Label[]
  integration Integration? @relation(fields: [integrationId], references: [id])
  tab         Tab[]

  entities      Entity[]
  integrationId String?

  invitedUsers CollectionAccess[]
  inviteLinks  CollectionLink[]
}

model Entity {
  id   String     @id @unique @default(uuid())
  type EntityType

  // For all "entities"
  name        String
  pinned      Boolean @default(false)
  label       Label?  @relation(fields: [labelId], references: [id])
  note        String?
  attachments Json?

  trash          Boolean   @default(false)
  due            DateTime?
  dateOnly       Boolean   @default(true)
  recurrenceRule String?
  notifications  Int[]     @default([10, 30, 60])

  // ONLY for tasks
  completionInstances CompletionInstance[]

  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?

  agendaOrder String?
  labelOrder  String?

  spaceId String?
  space   Space?  @relation(fields: [spaceId], references: [id])
  labelId String?

  integration       Integration? @relation(fields: [integrationId], references: [id])
  integrationId     String?
  integrationParams Json?
}
