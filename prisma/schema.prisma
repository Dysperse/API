// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id         String   @id @unique @default(uuid())
  ip         String   @default("Unknown")
  deviceName String?
  deviceType String?
  timestamp  DateTime @default(now())

  userId  String
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  qrToken QrToken[]
}

model QrToken {
  token     String   @id @unique @default(cuid())
  expiresAt DateTime
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model User {
  id                       String    @id @unique @default(uuid())
  username                 String?   @unique
  email                    String    @unique
  password                 String
  twoFactorSecret          String?
  lastReleaseVersionViewed Int       @default(77711209)
  createdAt                DateTime  @default(now())
  timeZone                 String    @default("America/Los_Angeles")
  passkeys                 Passkey[]

  newsletterSubscriptionId String?

  hasEarlyAccess Boolean @default(false)

  vanishMode   Boolean      @default(false)
  weekStart    WeekStartDay @default(SUNDAY)
  militaryTime Boolean      @default(false)
  privateTasks Boolean      @default(false)
  mapsProvider String       @default("GOOGLE")

  dailyStreakGoal  Int? @default(5)
  weeklyStreakGoal Int? @default(10)

  profile     Profile?
  toursViewed String[]
  agreeTos    Boolean  @default(false)

  tabs         Tab[]
  sessions     Session[]
  spaces       SpaceInvite[]
  collections  Collection[]
  integrations Integration[]

  notificationSettings      NotificationSettings?
  notificationSubscriptions NotificationSubscription[]

  // Friends
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  // etc
  labels             Label[]
  invitedCollections CollectionAccess[]
  resetTokens        ResetToken[]
  widgets            Widget[]
}

model PasskeyChallenge {
  id        String   @id @unique @default(uuid())
  challenge String
  expiresAt DateTime @default(now())
}

model Passkey {
  id           String   @id @unique @default(uuid())
  credential   Json
  friendlyName String   @default("Passkey")
  createdAt    DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum ResetTokenType {
  EMAIL
  PASSWORD
}

model ResetToken {
  id        String         @id @unique @default(uuid())
  token     String
  expires   DateTime
  emailData String?
  type      ResetTokenType
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Profile {
  name         String
  bio          String   @default("")
  birthday     DateTime @default(now())
  picture      String?
  badges       Json?
  workingHours Json?
  lastActive   DateTime @default(now())
  private      Boolean  @default(false)
  pattern      String?
  lastPlanned  DateTime @default(now())
  tasksCreated Int      @default(0)

  theme          String   @default("mint")
  darkMode       String   @default("system")
  unlockedThemes String[] @default(["orange", "grass", "crimson"])

  spotifyAuthTokens Json?
  googleAuthTokens  Json?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tab    Tab[]
}

// Focus panel widget
model Widget {
  id     String @id @unique @default(uuid())
  type   String
  params Json
  order  String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Notifications
model NotificationSettings {
  id String @id @unique @default(uuid())

  groupNotifications Boolean @default(true)

  COLLECTION_INVITE      Boolean @default(true)
  COLLECTION_ITEM_CREATE Boolean @default(true)
  COLLECTION_ITEM_UPDATE Boolean @default(true)

  FRIEND_REQUEST_SEND   Boolean @default(true)
  FRIEND_REQUEST_ACCEPT Boolean @default(true)

  ENTITY_START Boolean @default(true)
  PLAN_DAY     Boolean @default(true)

  MFA_CODES Boolean @default(true)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationSubscriptionType {
  EXPO
  WEB
  FCM
}

model NotificationSubscription {
  id         String                       @id @unique @default(uuid())
  type       NotificationSubscriptionType
  tokens     Json
  deviceType Int?
  deviceName String?
  user       User?                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
}

// Friends
model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  accepted Boolean @default(false)
  blocked  Boolean @default(false)

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
}

// Tabs
model Tab {
  id     String @id @unique @default(uuid())
  slug   String
  params Json?

  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String?
  createdAt    DateTime    @default(now())

  order         String?
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  Profile       Profile? @relation(fields: [profileUserId], references: [userId], onDelete: Cascade)
  profileUserId String?
}

// Spaces
enum SpaceAccess {
  READ_ONLY
  ADMIN
  OWNER
}

enum WeekStartDay {
  SUNDAY
  MONDAY
}

model Space {
  id   String @id @unique @default(uuid())
  name String

  collections  Collection[]
  labels       Label[]
  entities     Entity[]
  members      SpaceInvite[]
  integrations Integration[]
}

enum IntegrationType {
  GOOGLE_CALENDAR
  APPLE_CALENDAR
  OUTLOOK_CALENDAR
  CANVAS_LMS
  NOTION
  GMAIL
}

model Integration {
  id   String @id @unique @default(uuid())
  name String

  type IntegrationType

  lastSynced DateTime @default(now())
  params     Json

  options Json?

  space     Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  createdBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId   String
  userId    String

  collections Collection[]
  entities    Entity[]
  labels      Label[]

  // @@unique([name, userId])
}

model SpaceInvite {
  id       String      @id @unique @default(uuid())
  selected Boolean     @default(true)
  access   SpaceAccess @default(OWNER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

// Labels & Entities 
model Label {
  id    String @id @unique @default(uuid())
  // Appearance
  name  String
  emoji String
  color String @default("mint")

  // Location
  entities  Entity[]
  space     Space?   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId   String
  createdBy User     @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId    String

  // Collection?
  collections Collection[]

  integration       Integration? @relation(fields: [integrationId], references: [id], onDelete: SetNull)
  integrationId     String?
  integrationParams Json?
}

enum EntityType {
  TASK
  ITEM
  NOTE
}

model CompletionInstance {
  id          String    @id @unique @default(cuid())
  completedAt DateTime? @default(now())

  // For recurring tasks
  iteration DateTime?

  task   Entity @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

enum CollectionAccessType {
  READ_ONLY
  EDITOR
  MODERATOR
}

model CollectionAccess {
  id      String               @id @unique @default(uuid())
  hasSeen Boolean              @default(false)
  access  CollectionAccessType @default(READ_ONLY)

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model CollectionLink {
  id       String               @id @unique @default(uuid())
  access   CollectionAccessType @default(READ_ONLY)
  disabled Boolean              @default(false)

  collection Collection?
}

model Collection {
  id String @id @unique @default(uuid())

  // Info
  name                 String
  emoji                String?
  defaultView          String? @default("kanban")
  description          String  @default("")
  category             String?
  keepProfileAnonymous Boolean @default(false)

  pinCode                   String?
  pinAuthorizationExpiresAt DateTime?

  // User preferences
  pinned        Boolean @default(false)
  archived      Boolean @default(false)
  showCompleted Boolean @default(true)

  listOrder   Json?
  gridOrder   Json?
  kanbanOrder Json?

  locked Boolean @default(false)

  // Template stuff
  public              Boolean @default(false)
  shareItems          Boolean @default(false)
  keepAuthorAnonymous Boolean @default(false)

  originalCollectionTemplate   Collection? @relation("OriginalTemplate", fields: [originalCollectionTemplateId], references: [id])
  originalCollectionTemplateId String?

  // Collections that use this collection as a template
  templateCollections Collection[] @relation("OriginalTemplate")

  // Location
  space   Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId String?

  userId    String?
  createdBy User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Stuff
  labels      Label[]
  integration Integration? @relation(fields: [integrationId], references: [id], onDelete: SetNull)
  tab         Tab[]

  entities      Entity[]
  integrationId String?

  invitedUsers CollectionAccess[]

  inviteLink   CollectionLink? @relation(fields: [inviteLinkId], references: [id])
  inviteLinkId String?         @unique
}

model Entity {
  id   String     @id @unique @default(uuid())
  type EntityType

  // For all "entities"
  name        String
  pinned      Boolean @default(false)
  label       Label?  @relation(fields: [labelId], references: [id])
  note        String?
  attachments Json?
  storyPoints Int?

  trash Boolean @default(false)

  start DateTime?
  end   DateTime?

  dateOnly       Boolean @default(true)
  recurrenceRule Json?
  notifications  Int[]   @default([10])

  // ONLY for tasks
  completionInstances CompletionInstance[]

  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?

  agendaOrder String?
  labelOrder  String?

  spaceId   String?
  space     Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  published Boolean @default(false)
  shortId   String? @unique
  labelId   String?

  integration       Integration? @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId     String?
  integrationParams Json?

  parentTask   Entity?  @relation("Subtasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  parentTaskId String?
  subtasks     Entity[] @relation("Subtasks")
}
